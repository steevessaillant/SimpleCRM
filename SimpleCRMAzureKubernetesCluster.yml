name: Build and deploy .NET Core application to Web App SimpleCRMRestApiV2 with API Management Service SimpleApiV2api-CRMRestApiV2 then Build and Deploy to AKS
on:
  push:
    branches:
      - dev
env:
  RESOURCEGROUPNAME: "simplecrmkubernetescluster-rg"
  EXISTINGRESOURCEGROUPNAME: "SimpleCRMResourceGroup"
  SUBSCRIPTIONID: "8d512b56-1f3e-4976-a2d6-23d19fa62963"
  IMAGENAME: "simplecrmkubernetescluster54b4"
  REGISTRYSKU: "Standard"
  REGISTRYNAME: "simplecrmkubernetesclusteracr"
  REGISTRYLOCATION: "South Central US"
  EXISTINGCLUSTERID: "/subscriptions/8d512b56-1f3e-4976-a2d6-23d19fa62963/resourcegroups/SimpleCRMResourceGroup/providers/Microsoft.ContainerService/managedClusters/simplecrmkubernetescluster"
  EXISTINGCLUSTERNAME: "simplecrmkubernetescluster"
  APPINSIGHTSLOCATION: "East US"
  HTTPSAPPLICATIONROUTINGENABLED: false
  KUBERNETESAPI: "apps/v1"
  NAMESPACE: "simplecrmkubernetescluster7150"
  #AZURE VARIABLES
  AZURE_WEBAPP_NAME: SimpleCRMRestApiV2
  AZURE_WEBAPP_PACKAGE_PATH: CRMRestApiV2/publish
  AZURE_APIM_RESOURCE_PATH: /api
  AZURE_APIM_RESOURCEGROUP: SimpleCRMResourceGroup
  AZURE_APIM_SERVICENAME: SimpleApiV2api
  AZURE_APIM_API_ID: CRMRestApiV2
  AZURE_APIM_APPSERVICEURL: https://simplecrmrestapiv2.azurewebsites.net
  SWASHBUCLE_ASPNET_CORE_CLI_PACKAGE_VERSION: 6.4.0
  SWASHBUCKLE_DOTNET_CORE_VERSION: 6.0.x
  API_IMPORT_SPECIFICATION_PATH: CRMRestApiV2/publish/swagger.json
  API_IMPORT_DLL: CRMRestApiV2/bin/Release/net6.0/CRMRestApiV2.dll
  API_IMPORT_VERSION: v1
  CONFIGURATION: Debug

jobs:
  build:
    name: Build and push image to container registry
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
    - name: Setup SwashBuckle .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: ${{ env.SWASHBUCKLE_DOTNET_CORE_VERSION }}
    - name: Restore
      run: dotnet restore ${{ env.WORKING_DIRECTORY }}
    - name: Install Swashbuckle.AspNetCore.Cli for post build event to generate swagger.json
      run: dotnet tool install --local Swashbuckle.AspNetCore.Cli --version 6.4.0 
    - name: Build
      run: dotnet build ${{ env.WORKING_DIRECTORY }} --configuration ${{ env.CONFIGURATION }} --no-restore
    - name: Test
      run: dotnet test ${{ env.WORKING_DIRECTORY }} --no-build
    #- name: Generating XUnit Report
    #  uses: AutoModality/action-xunit-viewer@v1  
    #- name: Attach the report
    #  uses: actions/upload-artifact@v1
    #  with:
    #     name: ${{ steps.xunit-viewer.outputs.report-name }}
    #     path: ${{ steps.xunit-viewer.outputs.report-dir }}
    - name: Publish
      run: dotnet publish ${{ env.WORKING_DIRECTORY }} --configuration ${{ env.CONFIGURATION }} --no-build --output ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
    - name: Publish Artifacts
      uses: actions/upload-artifact@v1.0.0
      with:
        name: webapp
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

    # login to azure
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Application Insights
      uses: azure/arm-deploy@v1
      id: deploy
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.SUBSCRIPTIONID }}
        resourceGroupName: ${{ env.RESOURCEGROUPNAME }}
        template: ./ArmTemplates/aks-applicationInsights.json
        parameters: applicationInsightsName="${{ env.EXISTINGCLUSTERNAME }}" clusterId="${{ env.EXISTINGCLUSTERID }}" appInsightsLocation="${{ env.APPINSIGHTSLOCATION }}"

    # Deploy ARM template for container registry
    - name: Create ACR
      id: createACR
      run: |
          az acr create -n ${{ env.REGISTRYNAME }} -g ${{ env.RESOURCEGROUPNAME }} --location "${{env.REGISTRYLOCATION}}" --sku ${{env.REGISTRYSKU}} --admin-enabled
          echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username`"
          echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"
          echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"

    - name: Build and push image to ACR
      id: build-image
      run: |
        echo "::add-mask::${{ steps.createACR.outputs.acr_password }}"
        docker login ${{ env.REGISTRYNAME }}.azurecr.io --username ${{ steps.createACR.outputs.acr_username }} --password ${{ steps.createACR.outputs.acr_password }}
        docker build "$GITHUB_WORKSPACE/Application" -f  "Application/Dockerfile" -t ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}
 
  deploy:
    name: Deploy application to AKS
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

      # login to azure
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get AKS Credentials
      id: getContext
      run: |
          az aks get-credentials --resource-group ${{ env.EXISTINGRESOURCEGROUPNAME }} --name ${{ env.EXISTINGCLUSTERNAME }} --file $GITHUB_WORKSPACE/kubeconfig
          echo "KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig" >> $GITHUB_ENV

    - name: Create namespace
      run: |
        namespacePresent=`kubectl get namespace | grep ${{ env.NAMESPACE }} | wc -l`
        if [ $namespacePresent -eq 0 ]
        then
            echo `kubectl create namespace ${{ env.NAMESPACE }}`
        fi

    - name: Get ACR credentials
      id: getACRCred
      run: |
           echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username | xargs`"
           echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`"
           echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`"

    - uses: azure/k8s-create-secret@v1
      with:
        namespace: ${{ env.NAMESPACE }}
        container-registry-url: ${{ env.REGISTRYNAME }}.azurecr.io
        container-registry-username: ${{ steps.getACRCred.outputs.acr_username }}
        container-registry-password: ${{ steps.getACRCred.outputs.acr_password }}
        secret-name: ${{ env.EXISTINGCLUSTERNAME }}dockerauth

    - name: Fetch Application insights key
      id: GetAppInsightsKey
      run: |
        echo "::set-output name=AIKey::`az resource show -g ${{ env.RESOURCEGROUPNAME }} -n ${{ env.EXISTINGCLUSTERNAME }} --resource-type "Microsoft.Insights/components" --query "properties.InstrumentationKey" -o tsv`"
        echo "::add-mask::`az resource show -g ${{ env.RESOURCEGROUPNAME }} -n ${{ env.EXISTINGCLUSTERNAME }} --resource-type "Microsoft.Insights/components" --query "properties.InstrumentationKey" -o tsv`"

    - name: Get Kubernetes version on the cluster
      id: k8sversion
      run:  |
        echo "::set-output name=KUBERNETESVERSION::`az aks show --resource-group ${{ env.EXISTINGRESOURCEGROUPNAME }} --name ${{ env.EXISTINGCLUSTERNAME }} | jq .kubernetesVersion`"

    - uses: azure/k8s-bake@v1
      id: bakeManifests
      with:
        renderEngine: 'helm'
        helmChart: './Application/charts/sampleapp' 
        overrideFiles: './Application/charts/sampleapp/values.yaml'
        overrides: |
            image.repository:${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}
            image.tag:${{ github.sha }}
            imagePullSecrets:{${{ env.EXISTINGCLUSTERNAME }}dockerauth}
            applicationInsights.InstrumentationKey:${{ steps.GetAppInsightsKey.outputs.AIKey }}
            apiVersion:${{ env.KUBERNETESAPI }}
            extensionApiVersion:${{ env.KUBERNETESAPI }}
        helm-version: 'latest' 
        silent: 'true'

    - uses: azure/k8s-deploy@v1
      with:
        namespace: ${{ env.NAMESPACE }}
        manifests: ${{ steps.bakeManifests.outputs.manifestsBundle }}
        images: |
          ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}
        imagepullsecrets: |
          ${{ env.EXISTINGCLUSTERNAME }}dockerauth

    - name : Cleanup
      run: | 
        az logout
        rm -rf $GITHUB_WORKSPACE/kubeconfig