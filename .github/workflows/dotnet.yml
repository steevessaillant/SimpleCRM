name: .NET

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "main" ]
    types: [closed]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug

jobs:
  build:
  
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0'
        include-prerelease: True

    - name: Install Azurite
      id: azuright
      uses: potatoqualitee/azuright@v1.1

    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore
      
    # Add coverlet.collector nuget package to test project - 'dotnet add <TestProject.cspoj> package coverlet
    - name: Test
      run: dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory coverage
      
    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@5.1.4
      with:
        reports: 'coverage/*/coverage.cobertura.xml' # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
        targetdir: 'coveragereport' # REQUIRED # The directory where the generated report should be saved.
        reporttypes: 'HtmlInline;Cobertura' # The output formats and scope (separated by semicolon)


    - name: Code Coverage Summary Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      # uses: joshjohanning/CodeCoverageSummary@v1.0.2
      with:
        filename: coveragereport/Cobertura.xml
        badge: true
        format: 'markdown'
        output: 'both'

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md

    - name: Write to Job Summary
      run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

    #- name: Login to DockerHub
    #  uses: docker/login-action@v2
    #  with:
    #    username: ${{ secrets.DOCKER_USERNAME }}
    #    password: ${{ secrets.DOCKER_PASSWORD }}
    
    #- name: Build docker image
    #  run: docker build -f ./CRMRestApiV2/Dockerfile . -t steevessaillantalithya/crmrestapiv2:latest
    #- name: Push to DockerHub
    #  run: docker push steevessaillantalithya/crmrestapiv2:latest

      
       