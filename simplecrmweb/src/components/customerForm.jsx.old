import React, { Component } from "react";
import moment from "moment";
import $ from 'jquery'; 
import { useForm } from 'react-hook-form';

const formValid = ({ isError, ...rest }) => {
  let isValid = false;

  Object.values(isError).forEach(val => {
    if (val.length > 0) {
      isValid = false
    } else {
      isValid = true
    }
  });

  Object.values(rest).forEach(val => {
    if (val === null) {
      isValid = false
    } else {
      isValid = true
    }
  });

  return isValid;
};

export default class CustomerForm extends Component {
  
  constructor(props) {
    super(props)
    this.state = {
      id: '',
      firstName: '',
      lastName: '',
      dateOfBirth: '',
      isError: {
        id: '',
        firstName: '',
        lastName: '',
        dateOfBirth: ''
      }
    }
  }


  onSubmit = e => {
    e.preventDefault();
    // const inputControls = [...e.currentTarget.children];
    // //remove last element which is the 'submit' button
    // inputControls.splice(-1);
    // debugger;
    // inputControls.forEach((target) => this.validate(target.lastChild));   
    if (formValid(this.state)) {
      fetch("http://localhost:5222/api/CRMCustomer", {
        method: 'POST',
        headers: {
          'accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          id: this.state.id,
          firstName: this.state.firstName,
          lastName: this.state.lastName,
          dateOfBirth: this.state.dateOfBirth
        })
      })
        .then(response => {
          //if (response.ok === true) {
          console.log(response)
          //setMessage("Customer, " + this.state.firstName + " " + this.state.lastName + " born on " + this.state.dateOfBirth + " was posted successfully!")
          //}
        })
        .catch(error => {
          // enter your logic for when there is an error (ex. error toast)
          console.log(error)
          //setMessage(error);
        });
    } else {
      console.log("Form is invalid!");
    }
  };


  formValChange = e => {
    e.preventDefault();
    const { name, value } = e.target;
    let isError = { ...this.state.isError };
    switch (name) {
      case "id":
        isError.id =
          value.length < 1 ? "At least 1 characater is required" : "";
        break;
      case "firstName":
        isError.firstName =
          value.length < 1 ? "At least 1 characaters are required" : "";
        break;
      case "lastName":
        isError.lastName = value.length < 1 ? "At least 1 characaters are required" : "";
        break;
      case "dateOfBirth":
        const yearsAgo = moment().diff(value, 'years', true); //with presion = true like 1.01
        const minimumAge = 18;
        isError.dateOfBirth =
          yearsAgo < minimumAge ? "Must be 18 years of age" : "";
        break;
      default:
        break;
    }

    this.setState({
      isError,
      [name]: value
    })
  };

  validate(target){
    let isError = { ...this.state.isError };
    switch (target.name) {
      case "id":
        isError.id =
          target.value.length < 1 ? "At least 1 characater is required" : "";
        break;
      case "firstName":
        isError.firstName =
        target.value.length < 2 ? "At least 4 characaters are required" : "";
        break;
      case "lastName":
        isError.lastName = target.value.length < 2 ? "At least 4 characaters are required" : "";
        break;
      case "dateOfBirth":
        const yearsAgo = moment().diff(target.value, 'years', true); //with presion = true like 1.01
        const minimumAge = 18;
        isError.dateOfBirth =
          yearsAgo < minimumAge ? "Must be 18 years of age" : "";
        break;
      default:
        break;
    }

    this.setState({
      isError,
      [target.name]: target.value
    })
  }

  render() {
    const { isError } = this.state;
    const {
      register,
      formState: { errors },
      trigger,
      handleSubmit,
      clearErrors
    } = useForm({
      mode: "onChange"
    });

    return (
      <form onSubmit={handleSubmit(this.onSubmit)} noValidate data-cy="form">
        <div className="form-group">
          <label>Id</label>
          <input data-cy="id" {...register("id", { required: true })}
            type="text"
            className={isError.id.length > 0 ? "is-invalid form-control" : "form-control"}
            name="id"
            onChange={this.formValChange}
          />
          {isError.id.length > 0 && (
            <span className="invalid-feedback">{isError.id}</span>
          )}
           {errors.firstName && <p>This field is Required</p>}
        </div>
        <div className="form-group">
          <label>First Name</label>
          <input
            type="text" data-cy="firstName" {...register("firstName", { required: true })}
            className={isError.firstName.length > 0 ? "is-invalid form-control" : "form-control"}
            name="firstName"
            onChange={this.formValChange}
          />
          {isError.firstName.length > 0 && (
            <span className="invalid-feedback">{isError.firstName}</span>
          )}
        </div>

        <div className="form-group">
          <label>Last Name</label>
          <input
            type="text" data-cy="lastName" {...register("lastName", { required: true })}
            className={isError.lastName.length > 0 ? "is-invalid form-control" : "form-control"}
            name="lastName"
            onChange={this.formValChange}
          />
          {isError.lastName.length > 0 && (
            <span className="invalid-feedback">{isError.lastName}</span>
          )}
        </div>

        <div className="form-group">
          <label>Date of Birth</label>
          <input
            type="date" data-cy="dateOfBirth" {...register("dateOfBirth", { required: true })}
            className={isError.dateOfBirth.length > 0 ? "is-invalid form-control" : "form-control"}
            name="dateOfBirth"
            onChange={this.formValChange}
          />
          {isError.dateOfBirth.length > 0 && (
            <span className="invalid-feedback">{isError.dateOfBirth}</span>
          )}
        </div>

        <button type="submit" onClick={() => {
          trigger();
        }} className="btn btn-block btn-danger">Create / Update Customer</button>
      </form>
    );
  }
}